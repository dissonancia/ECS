// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:

    // if zx == 0 then x else 0
    Mux16(a=x, b=false, sel=zx, out=x1);
    // if zy == 0 then y else 0
    Mux16(a=y, b=false, sel=zy, out=y1);

    Not16(in=x1, out=negx); // !x
    Not16(in=y1, out=negy); // !y
    // if nx == 0 then x else !x
    Mux16(a=x1, b=negx, sel=nx, out=x2);
    // if ny == 0 then y else !y
    Mux16(a=y1, b=negy, sel=ny, out=y2);

    And16(a=x2, b=y2, out=xANDy);  // x & y
    Add16(a=x2, b=y2, out=xPLUSy); // x + y
    // f == 0 then x & y else x + y
    Mux16(a=xANDy, b=xPLUSy, sel=f, out=result);

    Not16(in=result, out=negResult); // !result
    // if no == 0 then result else !result
    // if   out[15] == 0 then out > 0 and ng = 0
    // else out[15] == 1 then out < 0 and ng = 1
    Mux16(
        a=result, 
        b=negResult, 
        sel=no, 
        out=out,       // final function result
        out[0..7]=r1,  // used for the zr flag
        out[8..15]=r2, // used for the zr flag
        out[15]=ng     // MSB is 1 for negative numbers and 0 for non-negative: this is the correct value for the ng flag
    );


    // If out == 0 then zr = 1, else zr = 0
    // Since I won’t implement new chips that the book doesn't ask for,
    // I’m using what's available. Below is the internal logic of an Or16Way chip.
    // z1 and z2 are, respectively, the result of
    // (r1[0] OR r1[1] OR ... OR r1[7]) and
    // (r2[0] OR r2[1] OR ... OR r2[7])
    // Remember that r1 and r2 are the output split into two 8-bit parts.
    // With (z1 OR z2), we get our final result:
    // (z1 OR z2) == 0 is only possible if all bits are 0,
    // i.e., the output is zero and zr = 1.
    // If (z1 OR z2) == 0, zr should be 1;
    // if (z1 OR z2) == 1, zr should be 0.
    // This behavior is implemented with the final Not gate.

    Or8Way(in=r1, out=z1);
    Or8Way(in=r2, out=z2);
    Or(a=z1, b=z2, out=zero);
    Not(in=zero, out=zr); 
}
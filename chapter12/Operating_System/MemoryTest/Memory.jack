// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array heap;
    static int last;

    /** Initializes the class. */
    function void init() {
        let memory  = 0;
        let heap    = 2048;
        let heap[0] = -1;
        let heap[1] = 14334;
        let last    = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var int current, new_size, new_last;

        let current  = 0;
        let new_size = size + 2;
        while ((current > -1) & (heap[current + 1] < new_size)) {
            let current = heap[current];
        }
        if (current = -1) {
            do Output.printString("Insufficient space for allocation!");
            do Sys.error(1);
            return -1;
        } else {
            let heap[current + 1]  = heap[current + 1] - new_size;
            let new_last           = current + heap[current + 1] + 2;
            let heap[new_last]     = heap[current];
            let heap[current]      = new_last;
            let heap[new_last + 1] = size;
            return heap + new_last + 2;
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int base;
        let base       = o - heap - 2;
        let heap[base] = -1;
        let heap[last] = base;
        let last       = base;
        return;
    }    
}
